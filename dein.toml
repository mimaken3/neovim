[[plugins]]
repo = 'Shougo/dein.vim'

# Git
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <silent> gs :Gstatus<CR><C-w>T
nnoremap <silent> ga :Gwrite<CR><C-w>T
nnoremap <silent> gb :GBlame<CR><C-w>T
nnoremap <silent> gps :Gpush<CR>
nnoremap <silent> gpl :Gpull<CR>
'''

# コメントアウト
[[plugins]]
repo = 'tomtom/tcomment_vim'

# ファイル検索
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
'''

# ファイル検索
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

# 自動カッコ
[[plugins]]
repo = 'tpope/vim-surround'

# プレビューしながら一括置換
[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
nnoremap <silent><Leader>s :OverCommandLine<CR>
'''

# ツリー表示
[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
  nnoremap <silent><C-t> :NERDTreeToggle<CR>
'''

# codic (ネーミング辞書)
[[plugins]]
repo = 'koron/codic-vim'

# ブロックの移動
[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = '''
xmap <Space>d <Plug>(textmanip-duplicate-down)
nmap <Space>d <Plug>(textmanip-duplicate-down)
xmap <Space>D <Plug>(textmanip-duplicate-up)
nmap <Space>D <Plug>(textmanip-duplicate-up)
 
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

# ステータスバーなどをオシャレにする
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
" Powerline系フォントを利用する
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_theme = 'molokai'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" old vim-powerline symbols
" let g:airline_left_sep = '⮀'
" let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
" let g:airline_symbols.branch = '⭠'
" let g:airline_symbols.readonly = '⭤'
" let g:airline_symbols.linenr = '⭡'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

# 保存したら静的解析
 [[plugins]]
 repo = 'scrooloose/syntastic'
 hook_add = '''
 let g:syntastic_mode_map = {
   \ "mode" : "active",
  \ "active_filetypes" : ["go"],
 \}
 let g:syntastic_go_checkers = ['go', 'golint', 'govet']
 let g:go_fmt_autosave = 1
 let g:syntastic_aggregate_errors = 1
 augroup GoSaveHook
 autocmd!
 autocmd BufWritePre *.go GoImports
 augroup END
 '''

# Golangの補完や静的解析
 [[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
  " 保存時に必要なimportを自動的に挿入
  let g:go_fmt_command = "goimports"
   " LSPに任せる機能をOFFにする
"   let g:go_def_mapping_enabled = 0  
 "  let g:go_doc_keywordprg_enabled = 0 
   let g:go_def_mapping_enabled = 1  
   let g:go_doc_keywordprg_enabled = 1 

  " disable vim-go's autocompletion feature
   let g:go_code_completion_enabled = 0
  " GoRunやGoTest時に上下に画面分割を行う
  let g:go_term_mode = 'split'

  " ショートカット
  " leaderはバックスラッシュ\
  autocmd FileType go nmap <leader>b <Plug>(go-build)
  autocmd FileType go nmap <leader>d <Plug>(go-def)
  autocmd FileType go nmap <leader>p <Plug>(go-def-pop)
  autocmd FileType go nmap <leader>t <Plug>(go-test)

  " let mapleader = "\<Space>"
  autocmd FileType go nmap <leader>s <Plug>(go-def-split)
  autocmd FileType go nmap <leader>v <Plug>(go-def-vertical)
  " autocmd FileType go nmap <leader>r  <Plug>(go-run)

  " GoRunしたとき、出力結果画面にフォーカス
  " execute the whole project
  nnoremap <silent><Leader>r :split term://go run *.go<CR>
  " execute current file
  nnoremap <silent><Leader>r :split term://go run %<CR>
'''

# Golang デバッグ
[[plugins]]
repo = 'sebdah/vim-delve'
hook_add = '''
autocmd FileType go nmap <silent> ;b :DlvToggleBreakpoint<CR>
autocmd FileType go nmap <silent> ;r :DlvDebug<CR>
autocmd FileType go nmap <silent> ;c :DlvClearAll<CR>
'''

# Golang スニペット作成(「fn + tab」で「fmt.Println("")」など)
[[plugins]]
repo = 'SirVer/ultisnips'

[[plugins]]
repo = 'Shougo/deoplete.nvim'

[[plugins]]
repo = 'deoplete-plugins/deoplete-go'

[[plugins]]
repo = 'mdempsky/gocode'

# Golangの静的解析(入力と同時に解析)
# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# build = 'bash install.sh'
# rev = 'next'
# hook_add = '''
#   set hidden
#   let g:LanguageClient_serverCommands = {
#       \ 'go': ['gopls']
#       \ }
#   let g:LanguageClient_loadSettings = 1
#   nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
#   nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
# '''

# 閉じカッコ自動補完
[[plugins]]
repo = 'cohama/lexima.vim'

# Vim上で文字列検索
[[plugins]]
repo = 'rking/ag.vim'
hook_add = '''
'''

# Golang補完[[plugin]]
[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
hook_add = '''
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" ファイルを開いたとき変なエラーが出るのでコメント
" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

# js 構文解析をしてハイライト
# [[plugins]]
# repo = 'neovim/node-host'
# hook_post_update = '''
#   let g:dein#plugin.build = 'npm install'
# '''

# [[plugins]]
# repo = 'billyvg/tigris.nvim'
# on_ft = ['javascript', 'javascript.jsx']
# hook_post_update = '''
#   let g:dein#plugin.build = './install.sh'
#
#   # オンザフライで構文解析してハイライト
#   let g:tigris#enabled = 1
#   let g:tigris#on_the_fly_enabled = 1
#   let g:tigris#delay = 300
# '''

 [[plugins]]
 repo = 'alvan/vim-closetag'
 hook_add = '''
 let g:closetag_filenames = '*.html,*.vue,*.js,*.jsx'
 '''

 # 目的の行に素早く移動
 [[plugins]]
 repo = 'Lokaltog/vim-easymotion'
 hook_add = '''
 " ホームポジションに近いキーを使う
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「'」 + 何かにマッピング
let g:EasyMotion_leader_key="'"
" 1 ストローク選択を優先する
let g:EasyMotion_grouping=1
" カラー設定変更
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue
 '''
